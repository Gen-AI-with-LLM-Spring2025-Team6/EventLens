import snowflake.connector
import pandas as pd
import json
import os
import logging
from data_load.parameters.parameter_config  import (SNOWFLAKE_ACCOUNT,
SNOWFLAKE_USER, SNOWFLAKE_PASSWORD, SNOWFLAKE_DATABASE, SNOWFLAKE_SCHEMA, SNOWFLAKE_WAREHOUSE,
SNOWFLAKE_ROLE)




#website settings

WEBSITE_NAME = "MeetBoston"
Staging_table = f"{WEBSITE_NAME.upper()}_EVENT_DETAILS"

#setting up logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def get_snowflake_connection():
    """
    Create and return a Snowflake connection
    """
    try:
        return snowflake.connector.connect(
            user=SNOWFLAKE_USER,
            password=SNOWFLAKE_PASSWORD,
            account=SNOWFLAKE_ACCOUNT,
            warehouse=SNOWFLAKE_WAREHOUSE,
            database=SNOWFLAKE_DATABASE,
            schema=SNOWFLAKE_SCHEMA,
            role=SNOWFLAKE_ROLE,
            client_session_keep_alive=True
        )
    except Exception as e:
        logger.error(f"Error connecting to Snowflake: {str(e)}")
        raise

def load_to_staging(**context):
    try:
        ti = context['ti']
        extracted_file_path = ti.xcom_pull(task_ids='Extraction', key='extracted_events')
        with open(extracted_file_path, 'r') as f:
            df_events = pd.DataFrame(json.load(f))
        conn = get_snowflake_connection()
        cursor = conn.cursor()
        full_table_name = f"{SNOWFLAKE_SCHEMA}.{WEBSITE_NAME}"
        insert_query = f"""
        INSERT INTO {full_table_name} (
            TITLE,
            DESCRIPTION,
            FULL_ADDRESS,
            EVENT_DATES,
            IMAGE_URL,
            BUY_TICKETS_LINK,
            LATITUDE,
            LONGITUDE,
            LINK
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        """
        data_to_insert = [
            (
                row.get("TITLE", ""),
                row.get("DESCRIPTION", ""),
                row.get("FULL_ADDRESS", ""),
                row.get("EVENT_DATES", ""),
                row.get("IMAGE_URL", ""),
                row.get("BUY_TICKETS_LINK", ""),
                row.get("LATITUDE", ""),
                row.get("LONGITUDE", ""),
                row.get("LINK", ""),
                
            )
            for row in df_events
        ]

        # Execute insert
        cursor.executemany(insert_query, data_to_insert)
        conn.commit()
        logger.info(f"Inserted {len(data_to_insert)} records into {full_table_name}")

        cursor.close()
        conn.close()

        # Pass path to next task
        context['ti'].xcom_push(key='events_staged', value=extracted_file_path)

    except Exception as e:
        logger.error(f"Error loading to Snowflake staging: {str(e)}")
        raise
